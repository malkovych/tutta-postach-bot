#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import logging
import pandas as pd
import db_mysql as db
from datetime import datetime
from typing import Dict, List, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π)
import os
TOKEN = os.environ.get("BOT_TOKEN", "7973829035:AAHylWqTFczrGNkqhpOQcGUK1BqjhV3ogeM")
# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É Excel –∑ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞–º–∏
INGREDIENTS_FILE = "export_ingredients_250425.xlsx"

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
DATABASE_FILE = "kitchen_orders_db.json"

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
(
    MAIN_MENU, SELECTING_ORDER_TYPE, SELECTING_CATEGORY, 
    SELECTING_PRODUCT, VIEWING_ORDER, CONFIRMING_ORDER,
    REGISTRATION_ROLE, SUPPLIER_CATEGORIES, SUPPLIER_PHONE
) = range(9)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
db = {
    "users": {},
    "orders": [],
    "products": {},
    "suppliers": {}
}

# –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_id = str(user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    user_data = db.get_user(user_id)
    
    if user_data:
        return await show_main_menu(update, context)
    else:
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –æ–±—Ä–∞—Ç–∏ —Ä–æ–ª—å
        keyboard = [
            [InlineKeyboardButton("üë®‚Äçüç≥ Tutta Team (–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∫—É—Ö–Ω—ñ)", callback_data="role_kitchen")],
            [InlineKeyboardButton("üöö –ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫", callback_data="role_supplier")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {user.first_name}! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )
        
        return REGISTRATION_ROLE
        
# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ
async def register_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_id = str(user.id)
    data = query.data
    
    role = "kitchen" if data == "role_kitchen" else "supplier"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db.create_user(user_id, user.first_name, user.username, role)
    
    if role == "supplier":
        # –î–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        await query.edit_message_text(
            f"–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫!\n\n"
            f"–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –≤–∏ –ø–æ—Å—Ç–∞—á–∞—î—Ç–µ:"
        )
        return await show_supplier_categories(update, context)
    else:
        # –î–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∫—É—Ö–Ω—ñ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        db.update_user(user_id, {"is_registered": True})
        
        await query.edit_message_text(
            f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∫—É—Ö–Ω—ñ (Tutta Team)!\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏."
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–Ω—é
        return await show_main_menu(update, context, new_message=True)

# –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
async def show_supplier_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = str(query.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in db["users"]:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ /start"
        )
        return ConversationHandler.END
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if "supplier_categories" not in db["users"][user_id]:
        db["users"][user_id]["supplier_categories"] = []
    
    keyboard = []
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    for category in db["products"].keys():
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –æ–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
        is_selected = category in db["users"][user_id]["supplier_categories"]
        button_text = f"‚úÖ {category}" if is_selected else f"‚¨ú {category}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"supplier_cat_{category}")])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="supplier_categories_done")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –≤–∏ –ø–æ—Å—Ç–∞—á–∞—î—Ç–µ (–º–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞):",
        reply_markup=reply_markup
    )
    
    return SUPPLIER_CATEGORIES

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–æ–º
async def process_supplier_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    data = query.data
    
    if data == "supplier_categories_done":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        if not db["users"][user_id].get("supplier_categories"):
            # –Ø–∫—â–æ –Ω–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            await query.edit_message_text(
                "–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤."
            )
            return await show_supplier_categories(update, context)
        
        # –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        keyboard = [
            [KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await query.edit_message_text(
            "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É."
        )
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXX:",
            reply_markup=reply_markup
        )
        
        return SUPPLIER_PHONE
    
    else:
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category = data.replace("supplier_cat_", "")
        
        # –ó–º—ñ–Ω—é—î–º–æ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–¥–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ)
        if category in db["users"][user_id]["supplier_categories"]:
            db["users"][user_id]["supplier_categories"].remove(category)
        else:
            db["users"][user_id]["supplier_categories"].append(category)
        
        save_db()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        return await show_supplier_categories(update, context)

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
async def process_supplier_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    db["users"][user_id]["phone"] = phone
    db["users"][user_id]["is_registered"] = True
    
    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤
    supplier_id = f"supplier_{user_id}"
    db["suppliers"][supplier_id] = {
        "user_id": user_id,
        "name": db["users"][user_id]["name"],
        "phone": phone,
        "categories": db["users"][user_id]["supplier_categories"],
        "registration_date": datetime.now().isoformat(),
        "active": True
    }
    
    save_db()
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    await update.message.reply_text(
        f"–î—è–∫—É—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫.\n\n"
        f"–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:\n"
        f"{', '.join(db['users'][user_id]['supplier_categories'])}\n\n"
        f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {phone}",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="supplier_active_orders")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="supplier_settings")]
        ])
    )
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, new_message=False) -> int:
    user_id = str(update.effective_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    if user_id not in db["users"] or not db["users"][user_id].get("is_registered", False):
        if hasattr(update, "message"):
            await update.message.reply_text(
                "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
            )
        return ConversationHandler.END
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_role = db["users"][user_id].get("role", "kitchen")
    
    if user_role == "kitchen":
        # –ú–µ–Ω—é –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∫—É—Ö–Ω—ñ
        keyboard = [
            [InlineKeyboardButton("üóì –ü–ª–∞–Ω–æ–≤–µ (—Ç–∏–∂–Ω–µ–≤–µ)", callback_data="new_order_planned")],
            [InlineKeyboardButton("‚ö° –¢–µ—Ä–º—ñ–Ω–æ–≤–µ", callback_data="new_order_urgent")],
            [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders")]
        ]
        
        message_text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    else:
        # –ú–µ–Ω—é –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="supplier_active_orders")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="supplier_settings")]
        ]
        
        message_text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if new_message:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=reply_markup
        )
    else:
        if hasattr(update, "callback_query"):
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )
    
    return MAIN_MENU

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def new_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    data = query.data
    
    if data == "new_order_planned" or data == "new_order_urgent":
        order_type = "planned" if data == "new_order_planned" else "urgent"
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_id = f"{datetime.now().timestamp()}"
        new_order = {
            "id": order_id,
            "type": order_type,
            "user_id": user_id,
            "user_name": db["users"][user_id]["name"],
            "date": datetime.now().isoformat(),
            "status": "draft",
            "items": {}
        }
        
        db["orders"].append(new_order)
        db["users"][user_id]["current_order"] = order_id
        save_db()
        
        return await show_categories(update, context)
    
    elif data == "my_orders":
        return await view_my_orders(update, context)
    
    # –û–±—Ä–æ–±–∫–∞ –º–µ–Ω—é –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    elif data == "supplier_active_orders":
        return await show_supplier_orders(update, context)
    
    elif data == "supplier_settings":
        return await show_supplier_settings(update, context)
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
async def show_supplier_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–æ–º
    if user_id not in db["users"] or db["users"][user_id].get("role") != "supplier":
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É."
        )
        return MAIN_MENU
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—ñ –ø–æ—Å—Ç–∞—á–∞—î –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫
    supplier_categories = db["users"][user_id].get("supplier_categories", [])
    
    # –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    relevant_orders = []
    
    for order in db["orders"]:
        if order["status"] == "confirmed":
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
            for category in supplier_categories:
                if category in order["items"] and order["items"][category]:
                    relevant_orders.append(order)
                    break
    
    if not relevant_orders:
        await query.edit_message_text(
            "–ù–∞—Ä–∞–∑—ñ –¥–ª—è –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    message = "*üìã –ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤–∞—Å:*\n\n"
    
    for idx, order in enumerate(relevant_orders[:5]):  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        message += f"*–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{idx+1}*\n"
        message += f"–¢–∏–ø: {'üóì –ü–ª–∞–Ω–æ–≤–µ' if order['type'] == 'planned' else '‚ö° –¢–µ—Ä–º—ñ–Ω–æ–≤–µ'}\n"
        
        order_date = datetime.fromisoformat(order["date"])
        message += f"–î–∞—Ç–∞: {order_date.strftime('%d.%m.%Y %H:%M')}\n"
        
        message += f"–°—Ç–∞—Ç—É—Å: {get_status_text(order['status'])}\n"
        message += f"–í—ñ–¥: {order['user_name']}\n\n"
        
        message += "*–ü—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –≤–∞—Å:*\n"
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, —è–∫—ñ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
        for category in supplier_categories:
            if category in order["items"] and order["items"][category]:
                message += f"*{category}:*\n"
                for item in order["items"][category]:
                    message += f"- {item}\n"
                message += "\n"
        
        message += "------------\n\n"
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]]),
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
async def show_supplier_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    
    if user_id not in db["users"] or db["users"][user_id].get("role") != "supplier":
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É."
        )
        return MAIN_MENU
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
    supplier_data = db["users"][user_id]
    
    message = "*‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞*\n\n"
    message += f"–Ü–º'—è: {supplier_data.get('name')}\n"
    message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {supplier_data.get('phone')}\n"
    message += f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(supplier_data.get('supplier_categories', []))}\n"
    
    keyboard = [
        [InlineKeyboardButton("üìã –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="change_categories")],
        [InlineKeyboardButton("üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="change_phone")],
        [InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]
    ]
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

# –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if query:
        await query.answer()
        chat_id = query.message.chat_id
    else:
        chat_id = update.effective_chat.id
    
    keyboard = []
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    for category in db["products"].keys():
        keyboard.append([InlineKeyboardButton(category, callback_data=f"category_{category}")])
    
    keyboard.append([InlineKeyboardButton("üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="view_current_order")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:",
            reply_markup=reply_markup
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:",
            reply_markup=reply_markup
        )
    
    return SELECTING_CATEGORY

# –ü–æ–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def show_products_in_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    category = query.data.replace("category_", "")
    context.user_data["current_category"] = category
    
    products = db["products"].get(category, [])
    keyboard = []
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
    for idx, product in enumerate(products):
        keyboard.append([InlineKeyboardButton(product, callback_data=f"add_{idx}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="back_to_categories")])
    keyboard.append([InlineKeyboardButton("üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="view_current_order")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{category}\":",
        reply_markup=reply_markup
    )
    
    return SELECTING_PRODUCT

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    product_idx = int(query.data.replace("add_", ""))
    category = context.user_data.get("current_category")
    
    if not category:
        await query.edit_message_text(
            "–ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    order_id = db["users"][user_id]["current_order"]
    
    if not order_id or not any(o["id"] == order_id for o in db["orders"]):
        await query.edit_message_text(
            "–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = next((o for o in db["orders"] if o["id"] == order_id), None)
    product = db["products"][category][product_idx]
    
    # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if category not in order["items"]:
        order["items"][category] = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î —Ç–∞–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
    if product not in order["items"][category]:
        order["items"][category].append(product)
        save_db()
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∑ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data=f"category_{category}")],
            [InlineKeyboardButton("üìã –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="back_to_categories")],
            [InlineKeyboardButton("üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="view_current_order")]
        ]
        
        await query.edit_message_text(
            f"‚úÖ –î–æ–¥–∞–Ω–æ \"{product}\" –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–æ–≤–∞—Ä –∑ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data=f"category_{category}")],
            [InlineKeyboardButton("üìã –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="back_to_categories")],
            [InlineKeyboardButton("üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="view_current_order")]
        ]
        
        await query.edit_message_text(
            f"‚ùó \"{product}\" –≤–∂–µ —î —É –≤–∞—à–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return SELECTING_CATEGORY

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
async def back_to_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    return await show_categories(update, context)

# –ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def view_current_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    order_id = db["users"][user_id]["current_order"]
    
    if not order_id or not any(o["id"] == order_id for o in db["orders"]):
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–µ —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    order = next((o for o in db["orders"] if o["id"] == order_id), None)
    
    message = f"üìã *–í–∞—à–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
    message += f"–¢–∏–ø: {'üóì –ü–ª–∞–Ω–æ–≤–µ' if order['type'] == 'planned' else '‚ö° –¢–µ—Ä–º—ñ–Ω–æ–≤–µ'}\n"
    message += f"–°—Ç–∞—Ç—É—Å: {get_status_emoji(order['status'])} {get_status_text(order['status'])}\n\n"
    
    has_items = False
    for category in order["items"]:
        if order["items"][category]:
            has_items = True
            message += f"*{category}*:\n"
            
            for idx, item in enumerate(order["items"][category]):
                message += f"{idx + 1}. {item} (/remove_{category}_{idx})\n"
            
            message += "\n"
    
    if not has_items:
        message += "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î. –î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤", callback_data="back_to_categories")]
    ]
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è —á–µ—Ä–Ω–µ—Ç–æ–∫
    if order["status"] == "draft" and has_items:
        keyboard.append([InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return VIEWING_ORDER

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def remove_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text
    user_id = str(update.effective_user.id)
    
    # –ü–∞—Ä—Å–∏–º–æ –∫–æ–º–∞–Ω–¥—É /remove_category_idx
    parts = message_text.split('_')
    if len(parts) != 3:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    
    category = parts[1]
    try:
        product_idx = int(parts[2])
    except ValueError:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ–¥—É–∫—Ç—É.")
        return
    
    order_id = db["users"][user_id]["current_order"]
    
    if not order_id or not any(o["id"] == order_id for o in db["orders"]):
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return
    
    order = next((o for o in db["orders"] if o["id"] == order_id), None)
    
    if category in order["items"] and product_idx < len(order["items"][category]):
        removed_item = order["items"][category][product_idx]
        order["items"][category].pop(product_idx)
        
        # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Å—Ç–∞–ª–∞ –ø–æ—Ä–æ–∂–Ω—å–æ—é, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
        if not order["items"][category]:
            del order["items"][category]
        
        save_db()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="view_current_order")],
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", callback_data="back_to_categories")]
        ]
        
        await update.message.reply_text(
            f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ \"{removed_item}\" –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    order_id = db["users"][user_id]["current_order"]
    
    if not order_id or not any(o["id"] == order_id for o in db["orders"]):
        await query.edit_message_text(
            "–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    order = next((o for o in db["orders"] if o["id"] == order_id), None)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    has_items = False
    for category in order["items"]:
        if order["items"][category]:
            has_items = True
            break
    
    if not has_items:
        await query.edit_message_text(
            "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", callback_data="back_to_categories")]])
        )
        return SELECTING_CATEGORY
    
    # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order["status"] = "confirmed"
    order["confirmation_date"] = datetime.now().isoformat()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–∏–≤'—è–∑–∫—É –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    db["users"][user_id]["current_order"] = None
    
    save_db()
    
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É, —è–∫–∏–π –ø–æ—Å—Ç–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    for supplier_id, supplier in db["suppliers"].items():
        supplier_categories = supplier.get("categories", [])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –ø–æ—Å—Ç–∞—á–∞—î –±—É–¥—å-—è–∫—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
        relevant_categories = [cat for cat in supplier_categories if cat in order["items"] and order["items"][cat]]
        
        if relevant_categories:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
            supplier_message = f"üìã *–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø*\n"
            supplier_message += f"–¢–∏–ø: {'üóì –ü–ª–∞–Ω–æ–≤–µ' if order['type'] == 'planned' else '‚ö° –¢–µ—Ä–º—ñ–Ω–æ–≤–µ'}\n"
            supplier_message += f"ID: {order['id']}\n"
            supplier_message += f"–í—ñ–¥: {order['user_name']}\n"
            supplier_message += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            
            supplier_message += "*–ü—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è:*\n"
            
            for category in relevant_categories:
                supplier_message += f"*{category}:*\n"
                for item in order["items"][category]:
                    supplier_message += f"- {item}\n"
                supplier_message += "\n"
            
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É
            try:
                await context.bot.send_message(
                    chat_id=supplier["user_id"],
                    text=supplier_message,
                    parse_mode="Markdown"
                )
                
                logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É {supplier['name']} (ID: {supplier['user_id']})")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—É {supplier['name']}: {e}")
    
    await query.edit_message_text(
        "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞–º!\n\n"
        "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")],
            [InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders")]
        ])
    )
    
    return MAIN_MENU

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def view_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    user_orders = [o for o in db["orders"] if o["user_id"] == user_id]
    
    if not user_orders:
        await query.edit_message_text(
            "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]])
        )
        return MAIN_MENU
    
    message = "*üìã –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n"
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    user_orders.sort(key=lambda x: x["date"], reverse=True)
    
    for idx, order in enumerate(user_orders[:5]):  # –ü–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏
        message += f"{get_status_emoji(order['status'])} *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{idx + 1}*\n"
        message += f"–¢–∏–ø: {'üóì –ü–ª–∞–Ω–æ–≤–µ' if order['type'] == 'planned' else '‚ö° –¢–µ—Ä–º—ñ–Ω–æ–≤–µ'}\n"
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ ISO –¥–∞—Ç—É —É –±—ñ–ª—å—à —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        order_date = datetime.fromisoformat(order["date"])
        message += f"–î–∞—Ç–∞: {order_date.strftime('%d.%m.%Y %H:%M')}\n"
        
        message += f"–°—Ç–∞—Ç—É—Å: {get_status_text(order['status'])}\n"
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ–π
        item_count = sum(len(items) for items in order["items"].values())
        message += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω—å: {item_count}\n\n"
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="home")]]),
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    return await show_main_menu(update, context)

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_status_text(status: str) -> str:
    status_texts = {
        "draft": "–ß–µ—Ä–Ω–µ—Ç–∫–∞",
        "confirmed": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
        "processing": "–í –æ–±—Ä–æ–±—Ü—ñ",
        "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        "cancelled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
    }
    return status_texts.get(status, status)

def get_status_emoji(status: str) -> str:
    status_emojis = {
        "draft": "üìù",
        "confirmed": "‚úÖ",
        "processing": "‚è≥",
        "delivered": "üöö",
        "cancelled": "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")

# –ö–æ–º–∞–Ω–¥–∞ "–¥–æ–ø–æ–º–æ–≥–∞"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "*–ë–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–∞ –∫—É—Ö–Ω—é*\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É\n\n"
        "–¢–∏–ø–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
        "üóì *–ü–ª–∞–Ω–æ–≤–µ* - —Ç–∏–∂–Ω–µ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—ñ –∑–±–∏—Ä–∞—é—Ç—å—Å—è –ø–æ —Å—É–±–æ—Ç–∞—Ö\n"
        "‚ö° *–¢–µ—Ä–º—ñ–Ω–æ–≤–µ* - –¥–ª—è –Ω–µ–≥–∞–π–Ω–∏—Ö –ø–æ—Ç—Ä–µ–±\n\n"
        "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        parse_mode="Markdown"
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–Ø —Ä–æ–∑—É–º—ñ—é –ª–∏—à–µ –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏."
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–º—É —Ç–æ–∫–µ–Ω –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    load_db()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–æ—é
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REGISTRATION_ROLE: [
                CallbackQueryHandler(register_role, pattern="^role_")
            ],
            SUPPLIER_CATEGORIES: [
                CallbackQueryHandler(process_supplier_category, pattern="^supplier_cat_|^supplier_categories_done$")
            ],
            SUPPLIER_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_supplier_phone),
                MessageHandler(filters.CONTACT, process_supplier_phone)
            ],
            MAIN_MENU: [
                CallbackQueryHandler(new_order, pattern="^new_order_|^supplier_"),
                CallbackQueryHandler(view_my_orders, pattern="^my_orders$"),
                CallbackQueryHandler(go_home, pattern="^home$")
            ],
            SELECTING_CATEGORY: [
                CallbackQueryHandler(show_products_in_category, pattern="^category_"),
                CallbackQueryHandler(view_current_order, pattern="^view_current_order$"),
                CallbackQueryHandler(go_home, pattern="^home$")
            ],
            SELECTING_PRODUCT: [
                CallbackQueryHandler(add_product, pattern="^add_"),
                CallbackQueryHandler(back_to_categories, pattern="^back_to_categories$"),
                CallbackQueryHandler(view_current_order, pattern="^view_current_order$")
            ],
            VIEWING_ORDER: [
                CallbackQueryHandler(back_to_categories, pattern="^back_to_categories$"),
                CallbackQueryHandler(confirm_order, pattern="^confirm_order$")
            ],
            CONFIRMING_ORDER: [
                CallbackQueryHandler(go_home, pattern="^home$"),
                CallbackQueryHandler(view_my_orders, pattern="^my_orders$")
            ],
        },
        fallbacks=[
            CommandHandler("help", help_command),
            CommandHandler("start", start)
        ],
    )
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.COMMAND & filters.Regex("^/remove_"), remove_product))
    application.add_handler(CallbackQueryHandler(go_home, pattern="^home$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()
    
if __name__ == "__main__":
    main()
